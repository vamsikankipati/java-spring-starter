plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group 'java-spring-starter'
version '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '11.0.0-M11'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation group: 'javax.mail', name: 'mail', version: '1.4.1'
    implementation group: 'com.sun.activation', name: 'jakarta.activation', version: '1.2.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.apache.groovy:groovy-all:4.0.15'
    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

test {
    maxParallelForks = 3
    useJUnitPlatform()

    // Custom listener to track test execution time
    def testStartTimes = [:]

    beforeTest { descriptor ->
        testStartTimes[descriptor.id] = System.currentTimeMillis()
    }

    afterTest { descriptor, result ->
        def startTime = testStartTimes.remove(descriptor.id)
        def duration = System.currentTimeMillis() - startTime

        println "⏱️ ${descriptor.className} > ${descriptor.name} took : ${duration} ms"
    }
}

jar {
    enabled = true
}
bootRun {
    sourceResources sourceSets.main
}